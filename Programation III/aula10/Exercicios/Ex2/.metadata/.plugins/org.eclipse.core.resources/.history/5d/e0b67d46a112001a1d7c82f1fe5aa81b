package aula10Ex2;

import java.util.*;
import java.lang.Comparable;

public class BinarySearchTree<T extends Comparable<? super T>>implements Iterable<T> {
	// o elemento do tipo T deve ser comparável para efectuar pesquisas
	// mas como pode herdar a implementação de compareTo() é mais correcto
	// usar <? super T>
	private static class BSTNode<T> {
		T element;
		BSTNode<T> left;
		BSTNode<T> right;
	
		BSTNode(T theElement) {
			element = theElement;
			left = right = null;
		}
		
		// remove valor mínimo
		public BSTNode<T> subTreeMin(){
			return subTreeMin(this);
		}
		
		private BSTNode<T> subTreeMin(BSTNode<T> n){
			if(n.left == null)
				return n;
			
			return subTreeMax(n.left);
			
		}
		
		public BSTNode<T> subTreeMax(){
			return subTreeMax(this);
		}
		
		private BSTNode<T> subTreeMax(BSTNode<T> n){	
			if(n.right == null)
				return n;
			
			return subTreeMax(n.right);
		
		}
	}
	
	private BSTNode<T> root;
	private int numNodes;
	
	public BinarySearchTree() {
		root = null;
		numNodes = 0;
	}
	
	public void insert(T value) {
		if( contains(value) ) {
			System.err.println("ERROR! A árvore já contem o valo dado!");
		}
		root = insert(value, root);
	}
	
	private BSTNode<T> insert(T value, BSTNode<T> root) {
		// árvore vazia
		if(root == null) {
			numNodes++;
			return new BSTNode<T>(value);
		}
		int i = value.compareTo(root.element);
		// procura na subárvore da esquerda
		if(i < 0) {
			root.left = insert(value, root.left);
			return root;
		}
		// procura na subárvore da direita
		else {
			root.right = insert(value, root.right);
			return root;
		}
	}
	
	public void remove(T value) {
		if( !contains(value)) {
			throw new NoSuchElementException();
		}
		numNodes--;
		root = remove(value, root);
	}
	
	private BSTNode<T> remove (T value, BSTNode<T> root){
		if(root == null) {
			return root;
		}
		int i = value.compareTo(root.element);
		if (i < 0) {
			root.left = remove(value, root.left);
		}
		else if (i > 0){
			root.right = remove(value, root.right);
		}
		else if(root.left == null) {
			root = root.right;
		}
		else if(root.right == null) {
			root = root.left;
		}
		else {
			root = root.subTreeMin();
			remove(root.element);
		}
		return root;
	}

	public boolean contains(T value) {
		Iterator<T> iterator = iterator();
		boolean exists;
		return exists;
	}
	
	public Iterator<T> iterator() {
		return new BSTIterator<T> (root);
	}
}